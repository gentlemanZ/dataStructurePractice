/* Program: IntCollection.java
 * Author: Wayne Snyder
 * Date: 9/9/2014
 * Class: CS 112
 * Purpose: Solution for HW 01, Problem B.2. IntCollection is a simple container for integers; 
 * it allows duplicates, and if you delete an int, it will only remove the first instance it 
 * comes to. The interface Collection has been removed for the purposes of Lab 03. 
 */

public class IntCollectionLab {         // implements Collection {
   
   private final int MIN_SIZE = 10; 
   public int [] A = new int[MIN_SIZE]; 
   public int next = 0;  
   // To insert, first check if it is already there (no duplicates allowed!)
   // Scan from the right and move every element which is > over one slot to R; then insert
   // the new int when you find something <=.
   // Special case occurs if run off end of array without finding <= element.
   
   public void insert(int k) { 
      
      // Here's where to trace what number you are inserting 
      
      // Here's where to print out the data structure using toString (problem 2)
      // to see what it looks like before the insertion
      
      if(member(k)) {            // if already present, do nothing! 
         
         // here's where to trace if k is already in the collection
         
         return; 
      }
      
      if(next == A.length) {       // check if need to expand array because is full
         
         // Here's where to trace if array is being expanded and print out A.length
         
         expand();
      }
      
      // since k is not a member, we know we will move elements over to make
      // room, so start at end and move over under we get to the insertion point.
      
      for(int i = next-1; i >= -1; --i) {
         
         // Here's where to trace what i is each time through the loop
         
         if(i == -1) {            // Ran off the left side because inserting new smallest element
            // Here's where to trace if inserting new smallest element
            A[0] = k;
         }
         else if(A[i] <= k) {        // found insertion point; keep moving later elements over to R 
            // Here's where to trace whether you found the insertion point
            A[i+1] = k;
            break;
         }
         else {                          // else just keep moving larger elements to the right
            // Here's where to trace if you are moving elements over
            A[i+1] = A[i];
         }
      } 
      ++next;           // list has one more element
      
      // Here's where to print out the data structure using toString (problem 2)
      // to see what effect the insert has had.
   } 
 
   
   // delete the first instance of a given int by scanning from left to right; if find the int, then
   // move every later element left one slot
   
   public void delete(int k) {   
      for(int i = 0; i < next; ++i) {
         if(A[i] == k) {      // found it; move later elements over 
            for(int j = i+1; j < next; ++j) {
               A[j-1] = A[j];
            }
            --next;           // list has one fewer element
            break;
         }                    
      } 
      // check if need to shrink the array because is it less than 1/4th full
      // but do not shrink if it already at minimum size
      if(A.length > MIN_SIZE && size() < A.length/4) {
         shrink(); 
      }
   } 
   
   // does binary search on the array using the iterative algorithm from
   // the program BinarySearch.java provided on the CS 112 web site
   
   public boolean member(int k) {  
     
    boolean found = false;   
    int left = 0;
    int right = next - 1;              // search from 0 to end of useful elements (next - 1)
    
    while (left <= right && !found) {
      int middle = (left + right) / 2; 
      if(A[middle] == k)
         found = true;
      else if(k < A[middle])
         right = middle -1;
      else 
         left = middle + 1; 
    } 
        
    return found;
    
   }
   
   // for debugging....  shows the WHOLE array, and puts a "|" at the end of the elements actually
   //   stored
  
   public void list() {
      System.out.print("[");
      for(int i = 0; i < A.length; ++i) {
         if(i == next)
           System.out.print(" | " + A[i]);
         else if(i == 0)
           System.out.print(A[i] );
         else 
           System.out.print(", " + A[i] );
      }
      System.out.println("]  next = " + next); 
      
   }
   
   public int size() {
      return next;
   }
   
   public boolean isEmpty() {
      return (next == 0);
   }
   
   // resizing methods: should be private!
   
   private void expand() {
     int[] B = new int[2*A.length];
     for(int i = 0; i < A.length; ++i) {
        B[i] = A[i];
     }
     A = B;
  }
   
  private void shrink() {
     int[] B = new int[A.length/2];
     for(int i = 0; i < next; ++i) {
        B[i] = A[i];
     }
     A = B;
  }
  
  // Here's where the unit test goes!
} 




